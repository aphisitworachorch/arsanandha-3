stages:
  - codename-release
  - build
  - container-image-scan
  - deploy

variables:
  VERSIONING_BASE: "$CI_PIPELINE_IID"
  VERSIONING: "v0.2.$VERSIONING_BASE"
  HELM_VERSIONING: "1.2.$VERSIONING_BASE"
  PROJECT_NAME: "ap-frontend"
  IMAGE_NAME: "arsanandha-frontend"
  DOCKER_BUILD: "$IMAGE_NAME:$VERSIONING"
  IMAGE_REPOSITORY: "$CI_REGISTRY/arsanandha.ap/$PROJECT_NAME"
  K8S_NAMESPACE: "arsanandha"

codename-releaser:
  stage: codename-release
  tags:
    - "frontend-ap"
  image: alpine
  before_script:
    - apk add --no-cache curl
  script:
    - CODENAME="$(curl https://codename.arsanandha.xyz/codename/generator)"
    - echo "CURRENT_CODENAME=$CODENAME" >> codename.env
  artifacts:
    reports:
      dotenv: codename.env

frontend-ap-docker-build:
  stage: build
  tags:
    - "frontend-ap"
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - chmod +x ./setup_env.sh
    - sh ./setup_env.sh
  script:
    - echo "Current Codename is $CURRENT_CODENAME"
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t $IMAGE_REPOSITORY/$DOCKER_BUILD .
    - docker push $IMAGE_REPOSITORY/$DOCKER_BUILD

frontend-ap-container-image-scan:
  stage: container-image-scan
  image: docker:24.0.5
  tags:
    - "frontend-ap"
  variables:
    GIT_STRATEGY: none
    TRIVY_TIMEOUT: 60m
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  allow_failure: false
  interruptible: true
  timeout: 60m
  when: on_success
  services:
    - docker:24.0.5-dind
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $IMAGE_REPOSITORY/$DOCKER_BUILD
    - ./trivy image --format cyclonedx --output cyclonedx.json --severity MEDIUM,HIGH,CRITICAL $IMAGE_REPOSITORY/$DOCKER_BUILD
    - ./trivy sbom cyclonedx.json --format template --template "@contrib/html.tpl" -o report.html --severity MEDIUM,HIGH,CRITICAL
    - ./trivy sbom cyclonedx.json --format template --template "@contrib/gitlab.tpl" -o report.json --severity MEDIUM,HIGH,CRITICAL
  artifacts:
    when: always
    name: "arsanandha-frontend:$VERSIONING"
    paths:
      - $CI_PROJECT_DIR/report.html
      - $CI_PROJECT_DIR/report-js.json

frontend-ap-k8s-apply:
  stage: deploy
  image: dtzar/helm-kubectl:latest
  tags:
    - "frontend-ap"
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - 'sed -i -e "s/appVersion: 1.16.0/appVersion: "$HELM_VERSIONING"/g" ./arsanandha-frontend/Chart.yaml'
    - 'sed -i -e "s/version: 0.1.0/version: "$VERSIONING_BASE"/g" ./arsanandha-frontend/Chart.yaml'
    - 'sed -i -e "s|{{codename}}|$CURRENT_CODENAME|g" ./arsanandha-frontend/values.yaml'
    - 'sed -i -e "s|{{image-repository}}|$IMAGE_REPOSITORY|g" ./arsanandha-frontend/values.yaml'
    - 'sed -i -e "s|{{image-name}}|$IMAGE_NAME|g" ./arsanandha-frontend/values.yaml'
    - 'sed -i -e "s|{{image-tag}}|$VERSIONING|g" ./arsanandha-frontend/values.yaml'
    - 'sed -i -e "s|{{nuxt-api-key}}|$API_KEY|g" ./arsanandha-frontend/values.yaml'
    - 'sed -i -e "s|{{nuxt-public-api-url}}|$API_URL|g" ./arsanandha-frontend/values.yaml'
    - cat ./arsanandha-frontend/values.yaml
  script:
    - kubectl config get-contexts
    - kubectl get namespace
    - helm upgrade --install -f ./arsanandha-frontend/values.yaml ${PROJECT_NAME} ./arsanandha-frontend -n $K8S_NAMESPACE --dry-run --debug --create-namespace
    - helm upgrade --install -f ./arsanandha-frontend/values.yaml ${PROJECT_NAME} ./arsanandha-frontend -n $K8S_NAMESPACE --create-namespace
    - kubectl get pods -n $K8S_NAMESPACE