stages:
  - build
  - deploy

variables:
  VERSIONING: "v0.0.$CI_PIPELINE_IID"

frontend-ap-docker-build:
  stage: build
  tags:
    - "frontend-ap"
  image: docker
  before_script:
    - chmod +x ./setup_env.sh
    - sh ./setup_env.sh
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY/arsanandha.ap/ap-frontend/ap-frontend:$VERSIONING .
    - docker push $CI_REGISTRY/arsanandha.ap/ap-frontend/ap-frontend:$VERSIONING

frontend-ap-k8s-apply:
  stage: deploy
  image: bitnami/kubectl:latest
  tags:
    - "frontend-ap"
  variables:
    SECRET_FILE: 'secret-file.yaml'
  before_script:
    - |
      echo "apiVersion: v1
      kind: Secret
      metadata:
        name: arsanandha-frontend-secret
      type: Opaque
      data:
        API_URL: $(echo -n "$API_URL" | base64 | tr -d \\n)
        API_KEY: $(echo -n "$API_KEY" | base64 | tr -d \\n)" > $SECRET_FILE
  script:
    - kubectl config set-cluster ${KUBE_CLUSTER_NAME} --server="${KUBE_SERVER}"
    - kubectl config set clusters.${KUBE_CLUSTER_NAME}.certificate-authority-data ${KUBE_CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials ${KUBE_USER} --token="${KUBE_TOKEN}"
    - kubectl config set-context default --cluster=${KUBE_CLUSTER_NAME} --user=${KUBE_USER}
    - kubectl config use-context default
    - kubectl config get-contexts
    - kubectl get namespace
    - kubectl apply -f $SECRET_FILE --namespace=arsanandha
    - kubectl apply -f $CI_PROJECT_DIR/frontend-deploy.yaml
    - kubectl set image deployment/ap-frontend ap-frontend=$CI_REGISTRY/arsanandha.ap/ap-frontend/ap-frontend:$VERSIONING --namespace=arsanandha